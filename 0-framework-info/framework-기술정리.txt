**Framework**
주요목차
- Spring IOC/DI
- Spring AOP
- MyBatis Framework
- SpringMVC (Spring Legacy project)
- Ajax /JQuery / JSON / REST
- SpringBoot
- Thymeleaf
- Spring Security
- Spring Cloud (MSA) , RestTemplate, JPA

------------------------------------------------------------

- 개념정리
높은 응집도 (high cohesion), 낮은 결합도( loose coupling)
"모듈 간의 결합도는 최소화하고 모듈 내 요소들 간의 응집도를 최대화"
응집도 : 자신의 역할에 집중하는 정도
			모듈 내의 기능 수행을 위해 요소간에 얼마만큼 책임이 집중되어 있는지를 나타내는 정도
결합도 :  모듈 간의 상호 의존 정도

- 객체지향 ( Object-Oriented )
시스템 분석 설계 기법
객체를 독립적인 기본단위로 채택하고 , 객체와 객체의 관계를 중심으로 분석, 설계하는 기법

- Class : Object 의 설계도
- Object : 속성과 기능으로 구성, 시스템의 기본 단위
- package : 클래스들을 분류
- library : 라이브러리, 재사용 가능한 프로그램들의 모음 ( jar: 자바프로그램 압축 파일 확장자 )
- component : 프로그램이 실행될 때 하나의 독립적 기능단위를 이루어 부품화되는 것 ( bean : 자바 컴포넌트)
- API : Application Programming Inteface
			응용프로그램을 개발하기 위해 제공하는 인터페이스
			
- Framework : 사전적의미 -> 뼈대, 틀, 기반(infrastructure)

- Spring Framework : java 어플리케이션의 설계, 구현, 테스트 , 운영 (유지보수) 전반에 대한 
								기반 ( infrastructure) 을 제공
								다양한 컴포넌트(or 라이브러리) 를 제공하고 디자인 패턴을 지원
								프레임워크는 반완전한 어플리케이션이다
								(개발자는 비즈니스 로직에 집중하도록 하는 것이 목적)
									
								IOC/DI, AOP, MVC, Security, SpringBoot 등을 지원하고
								MyBatis, JUnit 등과 같은 오픈 소스 프레임워크와의 통합을 지원한다
								
- IOC : Inversion of Control, 제어의 반전(역행) , 역제어
			컴포넌트를 구성하는 인스턴스 생성과 의존 관계 연결처리를 IOC  컨테이너에 위임
- DI : Dependency Injection , 의존성 주입
		필요로 하는 의존대상( 컴포넌트 or 객체 or bean)을 injection (주입) 을 통해 확보한다
- DL : Dependency Lookup , 의존성 검색
		필요로 하는 의존대상( 컴포넌트 or 객체 or bean)을 lookup (검색) 을 통해 확보한다
		
- IOC, DI, DL 의 목적 --> Loose Coupling (느슨한 결합도)

- Spring IOC Container 는 Singleton 방식으로 객체를 운용한다 
 참고 ) Singleton Design Pattern : 시스템 상에서 단 하나의 객체를 생성하고 공유해 사용하기 위한 디자인 패턴

-Maven : 의존 라이브러리 (dependency library) 를 일괄적으로 관리
				원격 저장소에 있는 라이브러리를 한번 로컬 저장소에 저장해 재사용한다
				설정파일은 pom.xml 이고 필요한 라이브러리를 이 곳에 추가해서 사용한다

AOP
Aspect Oriented Programming 관점 지향 프로그래밍
시스템을 핵심관심사 (Core Concern) 와 횡단관심사 or 공통관심사(Cross-Cutting Concert) 로
구분해 설계 구현 테스트 운영하는 것을 말한다

핵심 관심사 (Core Concern) : 시스템의 업무 목적에 해당하는 주요 로직(ex- 결제 등록 게시)
횡단 관심사 (Cross Cutting Concern) : 시스템의 여러 부분에 걸쳐 적용되는 공통적인 로직(exe - 트랜잭션, 로깅, 보안)

why? AOP는 시스템의 여러 영역에 걸쳐 공통적이고 반복적으로 적용된 횡단관심사 로직을 분리하여
		별도의 모듈에서 서계 구현 운영하는 프로그래밍 기법이다
		-> 반복적인 작업을 피할 수 있어서 효율적인 개발이 가능하고 
		이후 유지보수시 AOP 부분만 변경하면 되므로 유지보수성이 향상된다

AOP 용어
Advice : 적용시점 + Cross Cutting Concern (공통기능)
			어느 시점에 Cross Cutting Concern 을 Core Concern 에 적용할 것인가를 정의
			(advice 종류 ; before, after, after-returning . after-throwing, around)
			
Weaving : Advice 를 Core에 적용하는 것
PointCut : Advice 적용 대상을 지정, AspectJ 기술을 이용 (execution, within, bean)

-Proxy Design Pattern : AOP 에 적용된 주요 디자인 패턴
	Proxy 대리인, 대신해서 역할을 수행
	사용하는 측과 서비스 제공하는 측의 인터페이스 역할을 Proxy 가 한다( 팬- 아이유 매니저 - 아이유)
																													Proxy
	Core 객체를 사용하고자 할때 , 사용하는 측에서 실제 Core 객체를 참조하는 것이 아니라
	대리인 역할을 하는 Proxy 객체를 통해 Core 객체를 사용하게 함으로써
	Proxy 객체가 Cross Cutting Concern을 수행하게 한다
	
	- AOP 동작원리 
	Spring IOC Container 는 AOP 적용시 실제 Target Core 객체가 아니라 Proxy 객체를 사용하는 측으로 반환해 
	Core 실행시 Cross-cutting Concern 이 실행되도록 하는 구조다
	Proxy는 Core가 implements 하는 인터페이스를 동일하게 implements한다
	만약 Core가 인터페이스를 implements 하지 않을 때는 Proxy가 Core를 extends 하여
	사용하는 측에서 서비스를 호출할 때 Proxy가 아닌 Core를 실행하는 것처럼 느끼게 한다
	
- log4j: 프로그램 작성시 로그를 남기기 위해 사용되는 자바 기반 로깅 유틸리티(or 라이브러리)
설정 파일에서 팩키지별로 레벨 지정이 가능, 지정한 등급 이상의 로그만 저장하는 방식이다.

FATAL(가장 높은 로그레벨)
ERROR
WARN
INFO
DEBUG
TRACE(가장 낮은 로그레벨)